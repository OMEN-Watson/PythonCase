
Individual report for the COMP1730/6730 project assignment S1 2024
-------------------------------------------------------------------

Question 1: Write your name and ANU ID

Fan Yue
u7568823

I declare that this submission is my own work
[ref: https://www.anu.edu.au/students/academic-skills/academic-integrity ]
-------------------------------------------------------------------

Question 2: Select a piece of code in your assignment solution that
you have written, and explain:    

(a) What does this piece of code do?
The purpose of the "simulate_large_scale function" is to model and visualize the diffusion process over a two-dimensional grid, which corresponds to a distribution of heat or concentration. Larger grids are handled by this function, which is designed to maximize visual impact and help comprehend how the diffusion process changes over time. It effectively manages big data arrays by utilizing NumPy, a potent numerical processing library. For educational demonstrations or scientific visualizations where comprehension of the dynamic changes in the system is required, this function shows the grid state at each iteration, illustrating how the "temperature" or "concentration" changes. 

(b) How does it work?
In order to simulate diffusion, this function first initializes a grid with boundary conditions. It then iteratively updates the grid values based on the average of each cell's immediate neighbors. Here's a thorough explanation: 

1.Initialization: To simulate boundary conditions, a grid of a given size is first created, with edge values usually set to value 1. For effective computation, a NumPy array is used to represent this grid.

2.Visualization Setup: Matplotlib is used to visualize the initial state of the grid and display the diffusion space's initial conditions prior to initiating the simulation. This makes use of the matshow function, which can be used to display data that looks like a matrix. 

3.Diffusion Simulation: This function's primary responsibility is to simulate the diffusion process. The grid is updated iteratively using the local mean of adjacent cells:
  Padding: To accommodate edge cases, the grid is padded so that the simulation can apply a consistent calculation to the whole grid, including the edges.
  Updating: Using NumPy's optimized operations, the grid values are updated for each iteration by calculating the average of each cell with its neighbors using a convolution-like operation instead of explicitly looping through grid elements.

4.Visualization of Each Step: The diffusion process is depicted through a visualization of the updated grid following each iteration. It is easier to see how the diffusion stabilizes over time with the help of this repeated visualization. 

5.Repetition: To simulate the diffusion over time, this process is carried out a preset number of times.

(c) What other possible ways did you consider to implement this
functionality, and why did you choose the one you did?

 # Define the kernel for diffusion
 kernel = np.array([[0, 1, 0],
                    [1, 1, 1],
                    [0, 1, 0]])
 # Pad the grid to handle edges, using constant mode with constant value of 0
 padded_grid = np.pad(grid, pad_width=1, mode='constant', constant_values=0)
 # Perform the convolution using the kernel, avoiding explicit loops
 # this is an example of padded_grid with 5*5
        new_grid = (
            padded_grid[:-2, :-2] * kernel    +
            padded_grid[:-2, 1:-1] * kernel   +
            padded_grid[:-2, 2:] * kernel     +
            padded_grid[1:-1, :-2] * kernel   +
            padded_grid[1:-1, 1:-1] * kernel  +
            padded_grid[1:-1, 2:] * kernel    +
            padded_grid[2:, :-2] * kernel     +
            padded_grid[2:, 1:-1] * kernel    +
            padded_grid[2:, 2:] * kernel     
        )

        # Update the grid
        grid = new_grid
 there are two key point not solved(what's why i didn't implement this method): 
 firstly,how to  for loop all  elements in the matrix to get a 3*3 matrix with an at most O(n) complexity.
 secondly, how to know whether this element is at the corner? on the boundary or in a normal one? it will decide how many neighbours will be counted

 The chosen method using NumPy without explicit loops and with step-by-step visualization was selected because it strikes a balance between performance, simplicity, and educational value. It leverages NumPy's efficiency and is more accessible and easier to debug and understand compared to more complex implementations. This approach ensures that the simulation is both performant and practical for most use cases, particularly in educational settings where visual feedback is crucial.
-------------------------------------------------------------------